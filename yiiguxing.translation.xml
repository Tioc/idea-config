<application>
  <component name="AppStorage">
    <histories>
      <item value="前序" />
      <item value="preorder" />
      <item value="check Auth" />
      <item value="Security" />
      <item value="Realm" />
      <item value="Semaphore" />
      <item value="Count Down Latch" />
      <item value="Here is a non-reentrant mutual exclusion lock class that uses * the value zero to represent the unlocked state, and one to * represent the locked state. While a non-reentrant lock * does not strictly require recording of the current owner * thread, this class does so anyway to make usage easier to monitor. * It also supports conditions and exposes * one of the instrumentation methods:" />
      <item value="This class provides an efficient and scalable basis for * synchronization in part by specializing its range of use to * synchronizers that can rely on {@code int} state, acquire, and * release parameters, and an internal FIFO wait queue. When this does * not suffice, you can build synchronizers from a lower level using * {@link java.util.concurrent.atomic atomic} classes, your own custom * {@link java.util.Queue} classes, and {@link LockSupport} blocking * support." />
      <item value="Throughput and scalability are generally highest for the * default barging (also known as &lt;em&gt;greedy&lt;/em&gt;, * &lt;em&gt;renouncement&lt;/em&gt;, and &lt;em&gt;convoy-avoidance&lt;/em&gt;) strategy. * While this is not guaranteed to be fair or starvation-free, earlier * queued threads are allowed to recontend before later queued * threads, and each recontention has an unbiased chance to succeed * against incoming threads. Also, while acquires do not * &amp;quot;spin&amp;quot; in the usual sense, they may perform multiple * invocations of {@code tryAcquire} interspersed with other * computations before blocking. This gives most of the benefits of * spins when exclusive synchronization is only briefly held, without * most of the liabilities when it isn't. If so desired, you can * augment this by preceding calls to acquire methods with * &quot;fast-path&quot; checks, possibly prechecking {@link #hasContended} * and/or {@link #hasQueuedThreads} to only do so if the synchronizer * is likely not to be contended." />
      <item value="Because checks in acquire are invoked before * enqueuing, a newly acquiring thread may &lt;em&gt;barge&lt;/em&gt; ahead of * others that are blocked and queued. However, you can, if desired, * define {@code tryAcquire} and/or {@code tryAcquireShared} to * disable barging by internally invoking one or more of the inspection * methods, thereby providing a &lt;em&gt;fair&lt;/em&gt; FIFO acquisition order. * In particular, most fair synchronizers can define {@code tryAcquire} * to return {@code false} if {@link #hasQueuedPredecessors} (a method * specifically designed to be used by fair synchronizers) returns * {@code true}. Other variations are possible." />
      <item value="Acquire: * while (!tryAcquire(arg)) { * &lt;em&gt;enqueue thread if it is not already queued&lt;/em&gt;; * &lt;em&gt;possibly block current thread&lt;/em&gt;; * }" />
      <item value="Even though this class is based on an internal FIFO queue, it * does not automatically enforce FIFO acquisition policies. The core * of exclusive synchronization takes the form:" />
      <item value="You may also find the inherited methods from {@link * AbstractOwnableSynchronizer} useful to keep track of the thread * owning an exclusive synchronizer. You are encouraged to use them * -- this enables monitoring and diagnostic tools to assist users in * determining which threads hold locks." />
      <item value="Each of these methods by default throws {@link * UnsupportedOperationException}. Implementations of these methods * must be internally thread-safe, and should in general be short and * not block. Defining these methods is the &lt;em&gt;only&lt;/em&gt; supported * means of using this class. All other methods are declared * {@code final} because they cannot be independently varied. *" />
      <item value="To use this class as the basis of a synchronizer, redefine the * following methods, as applicable, by inspecting and/or modifying * the synchronization state using {@link #getState}, {@link * #setState} and/or {@link #compareAndSetState}:" />
      <item value="Serialization of this class stores only the underlying atomic * integer maintaining state, so deserialized objects have empty * thread queues. Typical subclasses requiring serializability will * define a {@code readObject} method that restores this to a known * initial state upon deserialization." />
      <item value="This class provides inspection, instrumentation, and monitoring * methods for the internal queue, as well as similar methods for * condition objects. These can be exported as desired into classes * using an {@code AbstractQueuedSynchronizer} for their * synchronization mechanics. *" />
      <item value="This class defines a nested {@link ConditionObject} class that * can be used as a {@link Condition} implementation by subclasses * supporting exclusive mode for which method {@link * #isHeldExclusively} reports whether synchronization is exclusively * held with respect to the current thread, method {@link #release} * invoked with the current {@link #getState} value fully releases * this object, and {@link #acquire}, given this saved state value, * eventually restores this object to its previous acquired state. No * {@code AbstractQueuedSynchronizer} method otherwise creates such a * condition, so if this constraint cannot be met, do not use it. The * behavior of {@link ConditionObject} depends of course on the * semantics of its synchronizer implementation." />
      <item value="This class supports either or both a default &lt;em&gt;exclusive&lt;/em&gt; * mode and a &lt;em&gt;shared&lt;/em&gt; mode. When acquired in exclusive mode, * attempted acquires by other threads cannot succeed. Shared mode * acquires by multiple threads may (but need not) succeed. This class * does not &amp;quot;understand&amp;quot; these differences except in the * mechanical sense that when a shared mode acquire succeeds, the next * waiting thread (if one exists) must also determine whether it can * acquire as well. Threads waiting in the different modes share the * same FIFO queue. Usually, implementation subclasses support only * one of these modes, but both can come into play for example in a * {@link ReadWriteLock}. Subclasses that support only exclusive or * only shared modes need not define the methods supporting the unused mode." />
      <item value="Instead it defines methods such as * {@link #acquireInterruptibly} that can be invoked as * appropriate by concrete locks and related synchronizers to * implement their public methods." />
      <item value="Class * {@code AbstractQueuedSynchronizer} does not implement any * synchronization interface." />
      <item value="Subclasses should be defined as non-public internal helper * classes that are used to implement the synchronization properties * of their enclosing class." />
      <item value="{@link * #setState} and {@link #compareAndSetState} is tracked with respect * to synchronization." />
      <item value="Subclasses can maintain * other state fields, but only the atomically updated {@code int} * value manipulated using methods {@link #getState}" />
      <item value="Given these, the other methods in this class carry * out all queuing and blocking mechanics." />
      <item value="Subclasses * must define the protected methods that change this state, and which * define what that state means in terms of this object being acquired * or released." />
      <item value="This class is designed to * be a useful basis for most kinds of synchronizers that rely on a * single atomic {@code int} value to represent state." />
      <item value="Provides a framework for implementing blocking locks and related * synchronizers (semaphores, events, etc) that rely on * first-in-first-out (FIFO) wait queues." />
      <item value="Provides a framework for implementing blocking locks and related * synchronizers (semaphores, events, etc) that rely on * first-in-first-out (FIFO) wait queues. This class is designed to * be a useful basis for most kinds of synchronizers that rely on a * single atomic {@code int} value to represent state. Subclasses * must define the protected methods that change this state, and which * define what that state means in terms of this object being acquired * or released. Given these, the other methods in this class carry * out all queuing and blocking mechanics. Subclasses can maintain * other state fields, but only the atomically updated {@code int} * value manipulated using methods {@link #getState}, {@link * #setState} and {@link #compareAndSetState} is tracked with respect * to synchronization." />
      <item value="This plugin supports the rendering of the most common ANSI graphic rendition sequences under IntelliJ editor. The following features are available:" />
      <item value="Represents an operation upon two operands of the same type, producing a result * of the same type as the operands. This is a specialization of * {@link BiFunction} for the case where the operands and the result are all of * the same type. * * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html&quot;&gt;functional interface&lt;/a&gt; * whose functional method is {@link #apply(Object, Object)}. * * @param &lt;T&gt; the type of the operands and result of the operator" />
      <item value="Unary Operator" />
      <item value="Binary Operator" />
      <item value="XSS" />
      <item value="function" />
      <item value="Illegal Argument Exception" />
      <item value="Argument" />
      <item value="Illegal Argument" />
      <item value="Illegal parameters" />
      <item value="非法的数据" />
      <item value="lacks" />
      <item value="conflict" />
      <item value="Differ" />
      <item value="col" />
      <item value="cols" />
      <item value="release-plan" />
      <item value="online-plan" />
      <item value="上线计划" />
      <item value="上线" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1252" />
        <entry key="ENGLISH" value="1252" />
        <entry key="CHINESE_TRADITIONAL" value="1" />
        <entry key="ALBANIAN" value="1" />
        <entry key="ARABIC" value="2" />
        <entry key="ESTONIAN" value="1" />
        <entry key="DANISH" value="6" />
        <entry key="GERMAN" value="4" />
        <entry key="FRENCH" value="19" />
        <entry key="FILIPINO" value="3" />
        <entry key="FINNISH" value="4" />
        <entry key="GUJARATI" value="3" />
        <entry key="CATALAN" value="11" />
        <entry key="CORSICAN" value="1" />
        <entry key="KURDISH" value="2" />
        <entry key="LATIN" value="2" />
        <entry key="LITHUANIAN" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="ROMANIAN" value="8" />
        <entry key="MARATHI" value="2" />
        <entry key="MALAYALAM" value="4" />
        <entry key="MALAY" value="1" />
        <entry key="HMONG" value="1" />
        <entry key="NORWEGIAN" value="6" />
        <entry key="PORTUGUESE" value="4" />
        <entry key="JAPANESE" value="8" />
        <entry key="SWEDISH" value="2" />
        <entry key="SLOVAK" value="2" />
        <entry key="SLOVENIAN" value="5" />
        <entry key="SCOTS_GAELIC" value="3" />
        <entry key="TURKISH" value="2" />
        <entry key="WELSH" value="2" />
        <entry key="SPANISH" value="1" />
        <entry key="ITALIAN" value="4" />
        <entry key="HINDI" value="5" />
        <entry key="INDONESIAN" value="10" />
        <entry key="VIETNAMESE" value="11" />
      </map>
    </option>
  </component>
</application>